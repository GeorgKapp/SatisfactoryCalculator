// <auto-generated />
using System;
using Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(ModelContext))]
    [Migration("20230704195836_FactoryConfigForeignKeyFix")]
    partial class FactoryConfigForeignKeyFix
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.7");

            modelBuilder.Entity("BuildingRecipe", b =>
                {
                    b.Property<string>("BuildingsClassName")
                        .HasColumnType("TEXT");

                    b.Property<string>("RecipeClassName")
                        .HasColumnType("TEXT");

                    b.HasKey("BuildingsClassName", "RecipeClassName");

                    b.HasIndex("RecipeClassName");

                    b.ToTable("RecipeBuilding", (string)null);
                });

            modelBuilder.Entity("CreatureCreature", b =>
                {
                    b.Property<string>("CreatureClassName")
                        .HasColumnType("TEXT");

                    b.Property<string>("VariantsClassName")
                        .HasColumnType("TEXT");

                    b.HasKey("CreatureClassName", "VariantsClassName");

                    b.HasIndex("VariantsClassName");

                    b.ToTable("CreatureVariant", (string)null);
                });

            modelBuilder.Entity("Data.Models.Implementation.Ammunition", b =>
                {
                    b.Property<string>("ClassName")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("FireRate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MaxAmmoEffectiveRange")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ReloadTimeMultiplier")
                        .HasColumnType("TEXT");

                    b.Property<string>("WeaponClassName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("WeaponDamageMultiplier")
                        .HasColumnType("TEXT");

                    b.HasKey("ClassName");

                    b.HasIndex("WeaponClassName");

                    b.ToTable("Ammunition", (string)null);
                });

            modelBuilder.Entity("Data.Models.Implementation.Building", b =>
                {
                    b.Property<string>("ClassName")
                        .HasColumnType("TEXT");

                    b.Property<string>("BigImagePath")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("ManufactoringSpeed")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("PowerConsumption")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("PowerConsumptionExponent")
                        .HasColumnType("TEXT");

                    b.Property<string>("PowerConsumptionRange")
                        .HasColumnType("TEXT");

                    b.Property<string>("SmallImagePath")
                        .HasColumnType("TEXT");

                    b.HasKey("ClassName");

                    b.ToTable("Building", (string)null);
                });

            modelBuilder.Entity("Data.Models.Implementation.Consumable", b =>
                {
                    b.Property<string>("ClassName")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("HealthGain")
                        .HasColumnType("TEXT");

                    b.HasKey("ClassName");

                    b.ToTable("Consumable", (string)null);
                });

            modelBuilder.Entity("Data.Models.Implementation.Creature", b =>
                {
                    b.Property<string>("ClassName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Behaviour")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BigImagePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Damage")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("HitPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LootID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SmallImagePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ClassName");

                    b.HasIndex("LootID");

                    b.ToTable("Creature", (string)null);
                });

            modelBuilder.Entity("Data.Models.Implementation.CreatureLoot", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ItemClassName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("ItemClassName");

                    b.ToTable("CreatureLoot", (string)null);
                });

            modelBuilder.Entity("Data.Models.Implementation.CustomizationRecipe", b =>
                {
                    b.Property<string>("ClassName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ConstructedByBuildGun")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ConstructedInWorkbench")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ConstructedInWorkshop")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPatternRemover")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSwatchRecipe")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ManualManufacturingMultiplier")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ManufactoringDuration")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("ManufacturingMenuPriority")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ClassName");

                    b.ToTable("CustomizationRecipe", (string)null);
                });

            modelBuilder.Entity("Data.Models.Implementation.CustomizationRecipeIngredient", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomizationRecipeClassName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemClassName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("CustomizationRecipeClassName");

                    b.HasIndex("ItemClassName");

                    b.ToTable("CustomizationRecipeIngredient", (string)null);
                });

            modelBuilder.Entity("Data.Models.Implementation.Emote", b =>
                {
                    b.Property<string>("ClassName")
                        .HasColumnType("TEXT");

                    b.Property<string>("BigImagePath")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SmallImagePath")
                        .HasColumnType("TEXT");

                    b.HasKey("ClassName");

                    b.ToTable("Emote", (string)null);
                });

            modelBuilder.Entity("Data.Models.Implementation.Equipment", b =>
                {
                    b.Property<string>("ClassName")
                        .HasColumnType("TEXT");

                    b.Property<string>("EquipmentSlot")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ClassName");

                    b.ToTable("Equipment", (string)null);
                });

            modelBuilder.Entity("Data.Models.Implementation.FactoryBuildingConfiguration", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<int>("BuildingAmount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BuildingClassName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("FactoryConfigurationID")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Overclock")
                        .HasColumnType("REAL");

                    b.Property<string>("ProducedBuildingClassName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProducedItemClassName")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("BuildingClassName");

                    b.HasIndex("FactoryConfigurationID");

                    b.HasIndex("ProducedBuildingClassName");

                    b.HasIndex("ProducedItemClassName");

                    b.ToTable("FactoryBuildingConfiguration", (string)null);
                });

            modelBuilder.Entity("Data.Models.Implementation.FactoryConfiguration", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CalculatedInVersion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double?>("DesiredOverclock")
                        .HasColumnType("REAL");

                    b.Property<bool>("SplitOverclockEvenly")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("FactoryConfiguration", (string)null);
                });

            modelBuilder.Entity("Data.Models.Implementation.FactoryConfigurationOutput", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BuildingClassName")
                        .HasColumnType("TEXT");

                    b.Property<int>("FactoryConfigurationID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ItemClassName")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("BuildingClassName");

                    b.HasIndex("FactoryConfigurationID");

                    b.HasIndex("ItemClassName");

                    b.ToTable("FactoryConfigurationOutput", (string)null);
                });

            modelBuilder.Entity("Data.Models.Implementation.FuelItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("ByProductAmount")
                        .HasColumnType("TEXT");

                    b.Property<string>("ByProductClassName")
                        .HasColumnType("TEXT");

                    b.Property<string>("FuelClassName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("GeneratorClassName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SupplementClassName")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("ByProductClassName");

                    b.HasIndex("FuelClassName");

                    b.HasIndex("GeneratorClassName");

                    b.HasIndex("SupplementClassName");

                    b.ToTable("FuelItem", (string)null);
                });

            modelBuilder.Entity("Data.Models.Implementation.Generator", b =>
                {
                    b.Property<string>("ClassName")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PowerProduction")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("SupplementToPowerRatio")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("SupplementalLoadAmount")
                        .HasColumnType("TEXT");

                    b.HasKey("ClassName");

                    b.ToTable("Generator", (string)null);
                });

            modelBuilder.Entity("Data.Models.Implementation.Item", b =>
                {
                    b.Property<string>("ClassName")
                        .HasColumnType("TEXT");

                    b.Property<string>("BigImagePath")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("EnergyValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("Form")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRadioActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("RadioActiveDecay")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SinkPoints")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SmallImagePath")
                        .HasColumnType("TEXT");

                    b.Property<string>("StackSize")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ClassName");

                    b.ToTable("Item", (string)null);
                });

            modelBuilder.Entity("Data.Models.Implementation.Miner", b =>
                {
                    b.Property<string>("ClassName")
                        .HasColumnType("TEXT");

                    b.Property<string>("AllowedResourceForm")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ExtractCycleTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("ItemsPerCycle")
                        .HasColumnType("INTEGER");

                    b.HasKey("ClassName");

                    b.ToTable("Miner", (string)null);
                });

            modelBuilder.Entity("Data.Models.Implementation.Plant", b =>
                {
                    b.Property<string>("ClassName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ClassName");

                    b.ToTable("Plant", (string)null);
                });

            modelBuilder.Entity("Data.Models.Implementation.Recipe", b =>
                {
                    b.Property<string>("ClassName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ConstructedByBuildGun")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ConstructedInWorkbench")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ConstructedInWorkshop")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsAlternate")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ManualManufacturingMultiplier")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ManufactoringDuration")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("ManufacturingMenuPriority")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VariablePowerConsumptionRange")
                        .HasColumnType("TEXT");

                    b.HasKey("ClassName");

                    b.ToTable("Recipe", (string)null);
                });

            modelBuilder.Entity("Data.Models.Implementation.RecipeIngredient", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemClassName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RecipeClassName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("ItemClassName");

                    b.HasIndex("RecipeClassName");

                    b.ToTable("RecipeIngredient", (string)null);
                });

            modelBuilder.Entity("Data.Models.Implementation.RecipeProduct", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<string>("BuildingClassName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemClassName")
                        .HasColumnType("TEXT");

                    b.Property<string>("RecipeClassName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("BuildingClassName");

                    b.HasIndex("ItemClassName");

                    b.HasIndex("RecipeClassName");

                    b.ToTable("RecipeProduct", (string)null);
                });

            modelBuilder.Entity("Data.Models.Implementation.Resource", b =>
                {
                    b.Property<string>("ClassName")
                        .HasColumnType("TEXT");

                    b.HasKey("ClassName");

                    b.ToTable("Resource", (string)null);
                });

            modelBuilder.Entity("Data.Models.Implementation.ScannableObject", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatureClassName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemClassName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PlantClassName")
                        .HasColumnType("TEXT");

                    b.Property<string>("SchematicClassName")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("CreatureClassName");

                    b.HasIndex("ItemClassName");

                    b.HasIndex("PlantClassName");

                    b.HasIndex("SchematicClassName");

                    b.ToTable("ScannableObject", (string)null);
                });

            modelBuilder.Entity("Data.Models.Implementation.ScanningActor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BuildingClassName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemClassName")
                        .HasColumnType("TEXT");

                    b.Property<int>("ScannableObjectID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("BuildingClassName");

                    b.HasIndex("ItemClassName");

                    b.HasIndex("ScannableObjectID");

                    b.ToTable("ScanningActor", (string)null);
                });

            modelBuilder.Entity("Data.Models.Implementation.Schematic", b =>
                {
                    b.Property<string>("ClassName")
                        .HasColumnType("TEXT");

                    b.Property<string>("BigImagePath")
                        .HasColumnType("TEXT");

                    b.Property<bool>("DependenciesBlocksSchematicAccess")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("HiddenUntilDependenciesMet")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("MenuPriority")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RelevantEvent")
                        .HasColumnType("TEXT");

                    b.Property<string>("SchematicType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SmallImagePath")
                        .HasColumnType("TEXT");

                    b.Property<int>("TechTier")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("TimeToComplete")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UnlocksArmEquipmentSlot")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UnlocksInventoryEquipmentSlot")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("UnlocksMap")
                        .HasColumnType("INTEGER");

                    b.HasKey("ClassName");

                    b.ToTable("Schematic", (string)null);
                });

            modelBuilder.Entity("Data.Models.Implementation.SchematicCost", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemClassName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SchematicClassName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("ItemClassName");

                    b.HasIndex("SchematicClassName");

                    b.ToTable("SchematicCost", (string)null);
                });

            modelBuilder.Entity("Data.Models.Implementation.SchematicDependency", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequireAllSchematicsToBePurchased")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SchematicClassName")
                        .HasColumnType("TEXT");

                    b.Property<string>("SchematicDependencyType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("SchematicClassName");

                    b.ToTable("SchematicDependency", (string)null);
                });

            modelBuilder.Entity("Data.Models.Implementation.Statue", b =>
                {
                    b.Property<string>("ClassName")
                        .HasColumnType("TEXT");

                    b.Property<string>("BigImagePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SmallImagePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ClassName");

                    b.ToTable("Statue", (string)null);
                });

            modelBuilder.Entity("Data.Models.Implementation.Vehicle", b =>
                {
                    b.Property<string>("ClassName")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("FuelConsumption")
                        .HasColumnType("TEXT");

                    b.Property<int?>("InventorySize")
                        .HasColumnType("INTEGER");

                    b.HasKey("ClassName");

                    b.ToTable("Vehicle", (string)null);
                });

            modelBuilder.Entity("Data.Models.Implementation.Weapon", b =>
                {
                    b.Property<string>("ClassName")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("AutoReloadDelay")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("DamageMultiplier")
                        .HasColumnType("TEXT");

                    b.Property<string>("EquipmentSlot")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("ReloadTime")
                        .HasColumnType("TEXT");

                    b.HasKey("ClassName");

                    b.ToTable("Weapon", (string)null);
                });

            modelBuilder.Entity("EmoteSchematic", b =>
                {
                    b.Property<string>("SchematicClassName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UnlocksEmotesClassName")
                        .HasColumnType("TEXT");

                    b.HasKey("SchematicClassName", "UnlocksEmotesClassName");

                    b.HasIndex("UnlocksEmotesClassName");

                    b.ToTable("SchematicEmoteUnlock", (string)null);
                });

            modelBuilder.Entity("ItemSchematic", b =>
                {
                    b.Property<string>("GivesItemsClassName")
                        .HasColumnType("TEXT");

                    b.Property<string>("SchematicClassName")
                        .HasColumnType("TEXT");

                    b.HasKey("GivesItemsClassName", "SchematicClassName");

                    b.HasIndex("SchematicClassName");

                    b.ToTable("SchematicItemGive", (string)null);
                });

            modelBuilder.Entity("MinerResource", b =>
                {
                    b.Property<string>("ExtractableResourcesClassName")
                        .HasColumnType("TEXT");

                    b.Property<string>("MinersClassName")
                        .HasColumnType("TEXT");

                    b.HasKey("ExtractableResourcesClassName", "MinersClassName");

                    b.HasIndex("MinersClassName");

                    b.ToTable("MinerResource", (string)null);
                });

            modelBuilder.Entity("RecipeSchematic", b =>
                {
                    b.Property<string>("SchematicClassName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UnlocksRecipesClassName")
                        .HasColumnType("TEXT");

                    b.HasKey("SchematicClassName", "UnlocksRecipesClassName");

                    b.HasIndex("UnlocksRecipesClassName");

                    b.ToTable("SchematicRecipeUnlock", (string)null);
                });

            modelBuilder.Entity("ResourceSchematic", b =>
                {
                    b.Property<string>("SchematicClassName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UnlocksScannerResourcesClassName")
                        .HasColumnType("TEXT");

                    b.HasKey("SchematicClassName", "UnlocksScannerResourcesClassName");

                    b.HasIndex("UnlocksScannerResourcesClassName");

                    b.ToTable("SchematicScannerResourceUnlock", (string)null);
                });

            modelBuilder.Entity("ResourceSchematic1", b =>
                {
                    b.Property<string>("Schematic1ClassName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UnlocksScannerResourcePairsClassName")
                        .HasColumnType("TEXT");

                    b.HasKey("Schematic1ClassName", "UnlocksScannerResourcePairsClassName");

                    b.HasIndex("UnlocksScannerResourcePairsClassName");

                    b.ToTable("SchematicScannerResourcePairUnlock", (string)null);
                });

            modelBuilder.Entity("SchematicSchematicDependency", b =>
                {
                    b.Property<int>("SchematicDependencyID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SchematicsClassName")
                        .HasColumnType("TEXT");

                    b.HasKey("SchematicDependencyID", "SchematicsClassName");

                    b.HasIndex("SchematicsClassName");

                    b.ToTable("SchematicDependencySchematics", (string)null);
                });

            modelBuilder.Entity("BuildingRecipe", b =>
                {
                    b.HasOne("Data.Models.Implementation.Building", null)
                        .WithMany()
                        .HasForeignKey("BuildingsClassName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Implementation.Recipe", null)
                        .WithMany()
                        .HasForeignKey("RecipeClassName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CreatureCreature", b =>
                {
                    b.HasOne("Data.Models.Implementation.Creature", null)
                        .WithMany()
                        .HasForeignKey("CreatureClassName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Implementation.Creature", null)
                        .WithMany()
                        .HasForeignKey("VariantsClassName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.Implementation.Ammunition", b =>
                {
                    b.HasOne("Data.Models.Implementation.Item", "Item")
                        .WithOne("Ammunition")
                        .HasForeignKey("Data.Models.Implementation.Ammunition", "ClassName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Implementation.Weapon", "Weapon")
                        .WithMany("Ammunitions")
                        .HasForeignKey("WeaponClassName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Weapon");
                });

            modelBuilder.Entity("Data.Models.Implementation.Consumable", b =>
                {
                    b.HasOne("Data.Models.Implementation.Item", "Item")
                        .WithOne("Consumable")
                        .HasForeignKey("Data.Models.Implementation.Consumable", "ClassName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Data.Models.Implementation.Creature", b =>
                {
                    b.HasOne("Data.Models.Implementation.CreatureLoot", "Loot")
                        .WithMany()
                        .HasForeignKey("LootID");

                    b.Navigation("Loot");
                });

            modelBuilder.Entity("Data.Models.Implementation.CreatureLoot", b =>
                {
                    b.HasOne("Data.Models.Implementation.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemClassName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Data.Models.Implementation.CustomizationRecipeIngredient", b =>
                {
                    b.HasOne("Data.Models.Implementation.CustomizationRecipe", null)
                        .WithMany("Ingredients")
                        .HasForeignKey("CustomizationRecipeClassName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Implementation.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemClassName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Data.Models.Implementation.Equipment", b =>
                {
                    b.HasOne("Data.Models.Implementation.Item", "Item")
                        .WithOne("Equipment")
                        .HasForeignKey("Data.Models.Implementation.Equipment", "ClassName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Data.Models.Implementation.FactoryBuildingConfiguration", b =>
                {
                    b.HasOne("Data.Models.Implementation.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingClassName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Implementation.FactoryConfiguration", "FactoryConfiguration")
                        .WithMany("FactoryBuildingConfigurations")
                        .HasForeignKey("FactoryConfigurationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Implementation.Building", "ProducedBuilding")
                        .WithMany()
                        .HasForeignKey("ProducedBuildingClassName");

                    b.HasOne("Data.Models.Implementation.Item", "ProducedItem")
                        .WithMany()
                        .HasForeignKey("ProducedItemClassName");

                    b.Navigation("Building");

                    b.Navigation("FactoryConfiguration");

                    b.Navigation("ProducedBuilding");

                    b.Navigation("ProducedItem");
                });

            modelBuilder.Entity("Data.Models.Implementation.FactoryConfigurationOutput", b =>
                {
                    b.HasOne("Data.Models.Implementation.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingClassName");

                    b.HasOne("Data.Models.Implementation.FactoryConfiguration", "FactoryConfiguration")
                        .WithMany("DesiredOutputs")
                        .HasForeignKey("FactoryConfigurationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Implementation.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemClassName");

                    b.Navigation("Building");

                    b.Navigation("FactoryConfiguration");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Data.Models.Implementation.FuelItem", b =>
                {
                    b.HasOne("Data.Models.Implementation.Item", "ByProduct")
                        .WithMany()
                        .HasForeignKey("ByProductClassName");

                    b.HasOne("Data.Models.Implementation.Item", "Fuel")
                        .WithMany()
                        .HasForeignKey("FuelClassName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Implementation.Generator", null)
                        .WithMany("Fuels")
                        .HasForeignKey("GeneratorClassName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Implementation.Item", "Supplement")
                        .WithMany()
                        .HasForeignKey("SupplementClassName");

                    b.Navigation("ByProduct");

                    b.Navigation("Fuel");

                    b.Navigation("Supplement");
                });

            modelBuilder.Entity("Data.Models.Implementation.Generator", b =>
                {
                    b.HasOne("Data.Models.Implementation.Building", "Building")
                        .WithOne("Generator")
                        .HasForeignKey("Data.Models.Implementation.Generator", "ClassName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("Data.Models.Implementation.Miner", b =>
                {
                    b.HasOne("Data.Models.Implementation.Building", "Building")
                        .WithOne("Miner")
                        .HasForeignKey("Data.Models.Implementation.Miner", "ClassName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("Data.Models.Implementation.RecipeIngredient", b =>
                {
                    b.HasOne("Data.Models.Implementation.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemClassName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Implementation.Recipe", null)
                        .WithMany("Ingredients")
                        .HasForeignKey("RecipeClassName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Data.Models.Implementation.RecipeProduct", b =>
                {
                    b.HasOne("Data.Models.Implementation.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingClassName");

                    b.HasOne("Data.Models.Implementation.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemClassName");

                    b.HasOne("Data.Models.Implementation.Recipe", null)
                        .WithMany("Products")
                        .HasForeignKey("RecipeClassName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Data.Models.Implementation.Resource", b =>
                {
                    b.HasOne("Data.Models.Implementation.Item", "Item")
                        .WithOne("Resource")
                        .HasForeignKey("Data.Models.Implementation.Resource", "ClassName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Data.Models.Implementation.ScannableObject", b =>
                {
                    b.HasOne("Data.Models.Implementation.Creature", "Creature")
                        .WithMany()
                        .HasForeignKey("CreatureClassName");

                    b.HasOne("Data.Models.Implementation.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemClassName");

                    b.HasOne("Data.Models.Implementation.Plant", "Plant")
                        .WithMany()
                        .HasForeignKey("PlantClassName");

                    b.HasOne("Data.Models.Implementation.Schematic", null)
                        .WithMany("UnlocksScannableObjects")
                        .HasForeignKey("SchematicClassName");

                    b.Navigation("Creature");

                    b.Navigation("Item");

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("Data.Models.Implementation.ScanningActor", b =>
                {
                    b.HasOne("Data.Models.Implementation.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingClassName");

                    b.HasOne("Data.Models.Implementation.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemClassName");

                    b.HasOne("Data.Models.Implementation.ScannableObject", null)
                        .WithMany("ScanningActors")
                        .HasForeignKey("ScannableObjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Data.Models.Implementation.SchematicCost", b =>
                {
                    b.HasOne("Data.Models.Implementation.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemClassName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Implementation.Schematic", null)
                        .WithMany("Costs")
                        .HasForeignKey("SchematicClassName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Data.Models.Implementation.SchematicDependency", b =>
                {
                    b.HasOne("Data.Models.Implementation.Schematic", null)
                        .WithMany("Dependencies")
                        .HasForeignKey("SchematicClassName");
                });

            modelBuilder.Entity("Data.Models.Implementation.Vehicle", b =>
                {
                    b.HasOne("Data.Models.Implementation.Item", "Item")
                        .WithOne("Vehicle")
                        .HasForeignKey("Data.Models.Implementation.Vehicle", "ClassName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Data.Models.Implementation.Weapon", b =>
                {
                    b.HasOne("Data.Models.Implementation.Item", "Item")
                        .WithOne("Weapon")
                        .HasForeignKey("Data.Models.Implementation.Weapon", "ClassName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("EmoteSchematic", b =>
                {
                    b.HasOne("Data.Models.Implementation.Schematic", null)
                        .WithMany()
                        .HasForeignKey("SchematicClassName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Implementation.Emote", null)
                        .WithMany()
                        .HasForeignKey("UnlocksEmotesClassName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ItemSchematic", b =>
                {
                    b.HasOne("Data.Models.Implementation.Item", null)
                        .WithMany()
                        .HasForeignKey("GivesItemsClassName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Implementation.Schematic", null)
                        .WithMany()
                        .HasForeignKey("SchematicClassName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MinerResource", b =>
                {
                    b.HasOne("Data.Models.Implementation.Resource", null)
                        .WithMany()
                        .HasForeignKey("ExtractableResourcesClassName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Implementation.Miner", null)
                        .WithMany()
                        .HasForeignKey("MinersClassName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RecipeSchematic", b =>
                {
                    b.HasOne("Data.Models.Implementation.Schematic", null)
                        .WithMany()
                        .HasForeignKey("SchematicClassName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Implementation.Recipe", null)
                        .WithMany()
                        .HasForeignKey("UnlocksRecipesClassName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ResourceSchematic", b =>
                {
                    b.HasOne("Data.Models.Implementation.Schematic", null)
                        .WithMany()
                        .HasForeignKey("SchematicClassName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Implementation.Resource", null)
                        .WithMany()
                        .HasForeignKey("UnlocksScannerResourcesClassName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ResourceSchematic1", b =>
                {
                    b.HasOne("Data.Models.Implementation.Schematic", null)
                        .WithMany()
                        .HasForeignKey("Schematic1ClassName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Implementation.Resource", null)
                        .WithMany()
                        .HasForeignKey("UnlocksScannerResourcePairsClassName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchematicSchematicDependency", b =>
                {
                    b.HasOne("Data.Models.Implementation.SchematicDependency", null)
                        .WithMany()
                        .HasForeignKey("SchematicDependencyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Implementation.Schematic", null)
                        .WithMany()
                        .HasForeignKey("SchematicsClassName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.Implementation.Building", b =>
                {
                    b.Navigation("Generator");

                    b.Navigation("Miner");
                });

            modelBuilder.Entity("Data.Models.Implementation.CustomizationRecipe", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("Data.Models.Implementation.FactoryConfiguration", b =>
                {
                    b.Navigation("DesiredOutputs");

                    b.Navigation("FactoryBuildingConfigurations");
                });

            modelBuilder.Entity("Data.Models.Implementation.Generator", b =>
                {
                    b.Navigation("Fuels");
                });

            modelBuilder.Entity("Data.Models.Implementation.Item", b =>
                {
                    b.Navigation("Ammunition");

                    b.Navigation("Consumable");

                    b.Navigation("Equipment");

                    b.Navigation("Resource");

                    b.Navigation("Vehicle");

                    b.Navigation("Weapon");
                });

            modelBuilder.Entity("Data.Models.Implementation.Recipe", b =>
                {
                    b.Navigation("Ingredients");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Data.Models.Implementation.ScannableObject", b =>
                {
                    b.Navigation("ScanningActors");
                });

            modelBuilder.Entity("Data.Models.Implementation.Schematic", b =>
                {
                    b.Navigation("Costs");

                    b.Navigation("Dependencies");

                    b.Navigation("UnlocksScannableObjects");
                });

            modelBuilder.Entity("Data.Models.Implementation.Weapon", b =>
                {
                    b.Navigation("Ammunitions");
                });
#pragma warning restore 612, 618
        }
    }
}
